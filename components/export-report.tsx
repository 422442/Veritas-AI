"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Download, Share2, Copy, FileText, Link2, Check, Mail, BarChart3 } from "lucide-react"
import { toast } from "sonner"
import type { AnalysisResult } from "@/app/page"

interface ExportReportProps {
  results: AnalysisResult
  sourceUrl?: string
}

export function ExportReport({ results, sourceUrl }: ExportReportProps) {
  const [copied, setCopied] = useState(false)

  const generateReportText = () => {
    const timestamp = new Date().toLocaleString()
    const verificationRate =
      results.claims.length > 0
        ? Math.round((results.claims.filter((c) => c.status === "verified").length / results.claims.length) * 100)
        : 0

    return `VERITAS AI - NEWS AUTHENTICITY REPORT
Generated: ${timestamp}
Powered by: Pathway Framework for Real-time Analysis
${sourceUrl ? `Source: ${sourceUrl}` : ""}

VERDICT: ${results.verdict}
CONFIDENCE: ${results.confidence}%
VERIFICATION RATE: ${verificationRate}%

EXECUTIVE SUMMARY:
${results.summary}

DETAILED CLAIM ANALYSIS:
${results.claims
  .map(
    (claim, i) =>
      `${i + 1}. CLAIM: ${claim.text}
   STATUS: ${claim.status.toUpperCase()}
   PATHWAY ANALYSIS: ${claim.explanation}`,
  )
  .join("\n\n")}

AI REASONING (Pathway Framework):
${results.reasoning}

VERIFIED SOURCES:
${results.sources
  .map(
    (source, i) =>
      `${i + 1}. ${source.title}
   URL: ${source.url}
   Validation: Pathway Framework Cross-Reference`,
  )
  .join("\n\n")}

METHODOLOGY:
- Real-time data processing via Pathway Framework
- Multi-source cross-referencing and validation
- AI-powered semantic analysis and fact-checking
- Continuous learning from verified news sources

DISCLAIMER:
This analysis was generated using Pathway Framework's real-time data processing
capabilities combined with advanced AI models. Results should be considered as
part of a comprehensive fact-checking process.

---
Report generated by Veritas AI - News Authenticity Analyzer
Powered by Pathway Framework | ${new Date().getFullYear()}
`
  }

  const generateDetailedReport = () => {
    const timestamp = new Date().toLocaleString()
    const verificationRate =
      results.claims.length > 0
        ? Math.round((results.claims.filter((c) => c.status === "verified").length / results.claims.length) * 100)
        : 0

    const verifiedClaims = results.claims.filter((c) => c.status === "verified").length
    const contradictedClaims = results.claims.filter((c) => c.status === "contradicted").length
    const unverifiedClaims = results.claims.filter((c) => c.status === "unverified").length

    return `<!DOCTYPE html>
<html>
<head>
    <title>Veritas AI Analysis Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
        .verdict { background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .claims { margin: 30px 0; }
        .claim { margin: 20px 0; padding: 15px; border-left: 4px solid #ddd; }
        .verified { border-left-color: #22c55e; }
        .contradicted { border-left-color: #ef4444; }
        .unverified { border-left-color: #f59e0b; }
        .sources { margin: 30px 0; }
        .source { margin: 10px 0; padding: 10px; background: #f9f9f9; }
        .stats { display: flex; gap: 20px; margin: 20px 0; }
        .stat { text-align: center; padding: 15px; background: #f0f0f0; border-radius: 8px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Veritas AI - News Authenticity Report</h1>
        <p><strong>Generated:</strong> ${timestamp}</p>
        <p><strong>Powered by:</strong> Pathway Framework</p>
        ${sourceUrl ? `<p><strong>Source:</strong> <a href="${sourceUrl}">${sourceUrl}</a></p>` : ""}
    </div>

    <div class="verdict">
        <h2>Analysis Verdict</h2>
        <p><strong>Result:</strong> ${results.verdict}</p>
        <p><strong>Confidence Level:</strong> ${results.confidence}%</p>
        <p><strong>Verification Rate:</strong> ${verificationRate}%</p>
    </div>

    <div class="stats">
        <div class="stat">
            <h3>${verifiedClaims}</h3>
            <p>Verified Claims</p>
        </div>
        <div class="stat">
            <h3>${contradictedClaims}</h3>
            <p>Contradicted Claims</p>
        </div>
        <div class="stat">
            <h3>${unverifiedClaims}</h3>
            <p>Unverified Claims</p>
        </div>
    </div>

    <h2>Executive Summary</h2>
    <p>${results.summary}</p>

    <div class="claims">
        <h2>Detailed Claim Analysis</h2>
        ${results.claims
          .map(
            (claim, i) =>
              `<div class="claim ${claim.status}">
                <h3>Claim ${i + 1}</h3>
                <p><strong>Statement:</strong> ${claim.text}</p>
                <p><strong>Status:</strong> ${claim.status.toUpperCase()}</p>
                <p><strong>Pathway Analysis:</strong> ${claim.explanation}</p>
              </div>`,
          )
          .join("")}
    </div>

    <h2>AI Reasoning (Pathway Framework)</h2>
    <p>${results.reasoning}</p>

    <div class="sources">
        <h2>Verified Sources</h2>
        ${results.sources
          .map(
            (source, i) =>
              `<div class="source">
                <h4>${i + 1}. ${source.title}</h4>
                <p><a href="${source.url}">${source.url}</a></p>
                <p><em>Validated through Pathway Framework cross-reference</em></p>
              </div>`,
          )
          .join("")}
    </div>

    <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #666;">
        <p>This analysis was generated using Pathway Framework's real-time data processing capabilities combined with advanced AI models.</p>
        <p>Report generated by Veritas AI - News Authenticity Analyzer | Powered by Pathway Framework | ${new Date().getFullYear()}</p>
    </div>
</body>
</html>`
  }

  const handleCopyReport = async () => {
    try {
      await navigator.clipboard.writeText(generateReportText())
      setCopied(true)
      toast.success("Report copied to clipboard")
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      toast.error("Failed to copy report")
    }
  }

  const handleDownloadReport = () => {
    const reportText = generateReportText()
    const blob = new Blob([reportText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `veritas-ai-pathway-report-${Date.now()}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    toast.success("Report downloaded successfully")
  }

  const handleDownloadHTMLReport = () => {
    const reportHTML = generateDetailedReport()
    const blob = new Blob([reportHTML], { type: "text/html" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `veritas-ai-pathway-report-${Date.now()}.html`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    toast.success("HTML report downloaded successfully")
  }

  const handleEmailReport = () => {
    const subject = encodeURIComponent(`Veritas AI Analysis: ${results.verdict}`)
    const body = encodeURIComponent(`I've analyzed a news article using Veritas AI powered by Pathway Framework.

Verdict: ${results.verdict}
Confidence: ${results.confidence}%

${results.summary}

${sourceUrl ? `Source: ${sourceUrl}` : ""}

Full report attached.`)

    window.location.href = `mailto:?subject=${subject}&body=${body}`
  }

  const handleShareUrl = async () => {
    try {
      if (sourceUrl) {
        await navigator.clipboard.writeText(sourceUrl)
        toast.success("Source URL copied to clipboard")
      } else {
        toast.error("No source URL available")
      }
    } catch (error) {
      toast.error("Failed to copy URL")
    }
  }

  const handleShareReport = async () => {
    const shareData = {
      title: `Veritas AI Analysis: ${results.verdict}`,
      text: `News authenticity analysis shows ${results.verdict} with ${results.confidence}% confidence. Powered by Pathway Framework. ${results.summary.substring(0, 100)}...`,
      url: sourceUrl || window.location.href,
    }

    if (navigator.share && navigator.canShare(shareData)) {
      try {
        await navigator.share(shareData)
        toast.success("Report shared successfully")
      } catch (error) {
        // Fallback to clipboard
        handleCopyReport()
      }
    } else {
      // Fallback to clipboard
      handleCopyReport()
    }
  }

  return (
    <Card className="border-border/50 bg-muted/20">
      <CardContent className="p-4">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <FileText className="h-4 w-4" />
            <span>Export & Share Analysis</span>
            <span className="text-xs bg-primary/10 text-primary px-2 py-1 rounded">Pathway Powered</span>
          </div>

          <div className="flex flex-wrap items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={handleCopyReport}
              className="flex items-center gap-2 bg-transparent text-xs sm:text-sm"
            >
              {copied ? <Check className="h-3 w-3 sm:h-4 sm:w-4" /> : <Copy className="h-3 w-3 sm:h-4 sm:w-4" />}
              {copied ? "Copied!" : "Copy"}
            </Button>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  className="flex items-center gap-2 bg-transparent text-xs sm:text-sm"
                >
                  <Download className="h-3 w-3 sm:h-4 sm:w-4" />
                  Export
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                <DropdownMenuItem onClick={handleDownloadReport}>
                  <FileText className="h-4 w-4 mr-2" />
                  Download as Text
                </DropdownMenuItem>
                <DropdownMenuItem onClick={handleDownloadHTMLReport}>
                  <BarChart3 className="h-4 w-4 mr-2" />
                  Download as HTML
                </DropdownMenuItem>
                <DropdownMenuItem onClick={handleEmailReport}>
                  <Mail className="h-4 w-4 mr-2" />
                  Share via Email
                </DropdownMenuItem>
                {sourceUrl && (
                  <DropdownMenuItem onClick={handleShareUrl}>
                    <Link2 className="h-4 w-4 mr-2" />
                    Copy Source URL
                  </DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>

            <Button
              variant="default"
              size="sm"
              onClick={handleShareReport}
              className="flex items-center gap-2 text-xs sm:text-sm"
            >
              <Share2 className="h-3 w-3 sm:h-4 sm:w-4" />
              Share
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}